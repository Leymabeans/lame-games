{"version":3,"sources":["js/vendor/scroll-entrance.js"],"names":["entrance","duration","distance","heightOffset","isElemInView","elem","rect","getBoundingClientRect","top","window","innerHeight","bottom","setInitialStyles","document","body","style","overflowX","anim","getAttribute","delay","transition","transitionDelay","opacity","transform","enter","visibility","className","viewportChange","Array","prototype","map","call","elements","item","classList","contains","init","querySelectorAll","addEventListener"],"mappings":";AAGMA,SAAW,GAGXA,SAASC,SAAW,OACpBD,SAASE,SAAW,MACpBF,SAASG,aAAe,IAExBH,SAASI,aAAe,SAASC,GAEzBC,IAAAA,EAAOD,EAAKE,wBAId,OACGD,EAAKE,IAAMR,SAASG,cAAiB,GAAMG,EAAKE,IAAMR,SAASG,cAAiBM,OAAOC,aAEvFJ,EAAKK,OAASX,SAASG,cAAiB,GAAMG,EAAKK,OAASX,SAASG,cAAiBM,OAAOC,aAE7FJ,EAAKE,IAAMR,SAASG,aAAgB,GAAMG,EAAKK,OAASX,SAASG,aAAgBM,OAAOC,aAKjGV,SAASY,iBAAmB,SAASP,GAGnCQ,SAASC,KAAKC,MAAMC,UAAY,SAG5BC,IAAAA,EAAOZ,EAAKa,aAAa,iBACzBC,EAAQd,EAAKa,aAAa,uBAE9Bb,EAAKU,MAAMK,WAAa,OAAUpB,SAASC,SAAW,IAAQ,SAG1DkB,IACFd,EAAKU,MAAMM,gBAAmBF,EAAQ,IAAQ,KAKpC,QAARF,IACFZ,EAAKU,MAAMO,QAAU,KAGX,aAARL,IACFZ,EAAKU,MAAMO,QAAU,IACrBjB,EAAKU,MAAMQ,UAAY,cAAgBvB,SAASE,SAAW,UAGjD,cAARe,IACFZ,EAAKU,MAAMO,QAAU,IACrBjB,EAAKU,MAAMQ,UAAY,aAAevB,SAASE,SAAW,UAGhD,YAARe,IACFZ,EAAKU,MAAMO,QAAU,IACrBjB,EAAKU,MAAMQ,UAAY,iBAAmBvB,SAASE,SAAW,OAGpD,eAARe,IACFZ,EAAKU,MAAMO,QAAU,IACrBjB,EAAKU,MAAMQ,UAAY,gBAAkBvB,SAASE,SAAW,QAMjEF,SAASwB,MAAQ,SAASnB,GAExBA,EAAKU,MAAMU,WAAa,UACxBpB,EAAKU,MAAMO,QAAU,IACrBjB,EAAKU,MAAMQ,UAAY,kBAEvBlB,EAAKqB,WAAa,gBAKpB1B,SAAS2B,eAAiB,WAExBC,MAAMC,UAAUC,IAAIC,KAAK/B,SAASgC,SAAU,SAASC,GAE9CjC,SAASI,aAAa6B,KAERA,EAAKC,UAAUC,SAAS,gBAGvCnC,SAASwB,MAAMS,OASvBjC,SAASoC,KAAO,WAGdpC,SAASgC,SAAWnB,SAASwB,iBAAiB,mBAG9CT,MAAMC,UAAUC,IAAIC,KAAK/B,SAASgC,SAAU,SAASC,GAEnDjC,SAASY,iBAAkBqB,GAEvBjC,SAASI,aAAa6B,IAGxBK,iBAAiB,OAAQ,WACvBtC,SAASwB,MAAOS,KACf,MASTK,iBAAiB,mBAAoBtC,SAASoC,MAAM,GAGpDE,iBAAiB,SAAUtC,SAAS2B,gBAAgB,GACpDW,iBAAiB,SAAUtC,SAAS2B,gBAAgB","file":"scroll-entrance.27bda429.js","sourceRoot":"..\\src","sourcesContent":["(function() {\n\n      //Create the object for the entrance plugin\n      entrance = {};\n\n      //Set up defaults\n      entrance.duration = \"1000\";\n      entrance.distance = \"200\";\n      entrance.heightOffset = 200;\n\n      entrance.isElemInView = function(elem) {\n\n          var rect = elem.getBoundingClientRect();\n\n          //Return true if any of the following conditions are met:\n          return(\n            // The top is in view: the top is more than 0 and less than the window height (the top of the element is in view)\n            ( (rect.top + entrance.heightOffset) >= 0 && (rect.top + entrance.heightOffset) <= window.innerHeight ) || \n            // The bottom is in view: bottom position is greater than 0 and greater than the window height\n            ( (rect.bottom + entrance.heightOffset) >= 0 && (rect.bottom + entrance.heightOffset) <= window.innerHeight ) ||\n            // The top is above the viewport and the bottom is below the viewport\n            ( (rect.top + entrance.heightOffset) < 0 && (rect.bottom + entrance.heightOffset) > window.innerHeight )\n          )\n\n      }\n\n      entrance.setInitialStyles = function(elem){\n\n        //Required style on the body to stop horizontal scrollbars\n        document.body.style.overflowX = \"hidden\";\n\n\n        var anim = elem.getAttribute(\"data-entrance\");\n        var delay = elem.getAttribute(\"data-entrance-delay\");\n\n        elem.style.transition = \"all \" + (entrance.duration / 1000) + \"s ease\";\n\n        // Add a delay is required\n        if (delay) {\n          elem.style.transitionDelay = (delay / 1000) + 's';\n        }\n\n        // Set up transition types\n\n        if (anim == \"fade\") {\n          elem.style.opacity = \"0\";\n        }\n\n        if (anim == \"from-left\") {\n          elem.style.opacity = \"0\";\n          elem.style.transform = \"translate(-\" + entrance.distance + \"px, 0)\";\n        }\n\n        if (anim == \"from-right\") {\n          elem.style.opacity = \"0\";\n          elem.style.transform = \"translate(\" + entrance.distance + \"px, 0)\";\n        }\n\n        if (anim == \"from-top\") {\n          elem.style.opacity = \"0\";\n          elem.style.transform = \"translate(0, -\" + entrance.distance + \"px)\";\n        }\n\n        if (anim == \"from-bottom\") {\n          elem.style.opacity = \"0\";\n          elem.style.transform = \"translate(0, \" + entrance.distance + \"px)\";\n        }     \n\n      }\n\n\n      entrance.enter = function(elem){\n\n        elem.style.visibility = \"visible\";\n        elem.style.opacity = \"1\";\n        elem.style.transform = \"translate(0, 0)\";\n\n        elem.className += \" has-entered\";\n\n      }\n\n\n      entrance.viewportChange = function(){\n\n        Array.prototype.map.call(entrance.elements, function(item) {\n\n          if ( entrance.isElemInView(item) ){\n\n            var hasEntered = item.classList.contains(\"has-entered\");\n\n            if (!hasEntered){\n              entrance.enter(item);\n            }\n\n          }\n\n        });\n        \n      }\n\n      entrance.init = function(){\n        \n        //Store the elements to be animated\n        entrance.elements = document.querySelectorAll('[data-entrance]');\n\n        // Set up the initial styles on each element, and check if they schould be visible\n        Array.prototype.map.call(entrance.elements, function(item) {\n\n          entrance.setInitialStyles( item );\n\n          if (entrance.isElemInView(item) ){\n\n            // If the elements are in view when loaded, animate in after load\n            addEventListener('load', function(){\n              entrance.enter( item );\n            }, false );\n            \n          }\n\n        });\n\n      }\n\n      // Initialise the plugin when the DOM is loaded\n      addEventListener('DOMContentLoaded', entrance.init, false );\n\n      // Add event liseners for scroll events\n      addEventListener('scroll', entrance.viewportChange, false); \n      addEventListener('resize', entrance.viewportChange, false); \n\n}());"]}